class Node:
    def _init_(self, val=0, neighbors=None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []

class Solution:
    def cloneGraph(self, node):
        if not node:
            return None
        
        # A dictionary to store the mapping from original nodes to their clones.
        clone_map = {}
        
        # A helper function to perform DFS (Depth First Search).
        def dfs(node):
            # If this node is already cloned, return the cloned version.
            if node in clone_map:
                return clone_map[node]
            
            # Create a clone for this node.
            clone_node = Node(node.val)
            clone_map[node] = clone_node
            
            # Recursively clone all the neighbors.
            for neighbor in node.neighbors:
                clone_node.neighbors.append(dfs(neighbor))
            
            return clone_node
        
        # Start the DFS traversal from the given node.
        return dfs(node)

# Helper function to build a graph from the adjacency list
def build_graph(edges):
    if not edges:
        return None

    nodes = {}
    
    # Create all nodes.
    for i in range(1, len(edges) + 1):
        nodes[i] = Node(i)
    
    # Set the neighbors for each node based on the edges.
    for i, neighbors in enumerate(edges, start=1):
        for neighbor in neighbors:
            nodes[i].neighbors.append(nodes[neighbor])
    
    return nodes[1]  # Return the reference to the first node.
